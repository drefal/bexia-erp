name: Bexia ERP â€“ Deploy

on:
  push:
    branches:
      - grupol7/develop
      - grupol7/main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DO_HOST: ${{ secrets.DO_HOST }}          # 134.199.219.36
      DO_USER: ${{ secrets.DO_USER }}          # root
      DO_PATH_TEST: ${{ secrets.DO_PATH_TEST }}  # /opt/bexia/test/grupol7
      DO_PATH_PROD: ${{ secrets.DO_PATH_PROD }}  # /opt/bexia/prod/grupol7

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start ssh-agent & add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_KEY }}   # clave privada SIN passphrase

      - name: Trust host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$DO_HOST" >> ~/.ssh/known_hosts

      - name: Set deploy target (TEST/PROD)
        id: target
        run: |
          if [[ "${GITHUB_REF##*/}" == "grupol7/main" ]]; then
            echo "path=$DO_PATH_PROD" >> $GITHUB_OUTPUT
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "path=$DO_PATH_TEST" >> $GITHUB_OUTPUT
            echo "env=test" >> $GITHUB_OUTPUT
          fi
          echo "Deploy path: $(cat $GITHUB_OUTPUT)"

      - name: Preflight (create dir, perms, space)
        run: |
          ssh $DO_USER@$DO_HOST "set -e
            P='${{ steps.target.outputs.path }}'
            mkdir -p \"\$P\"
            stat -c '%U:%G %A %n' \"\$P\" || true
            df -h \"\$P\" | tail -1
          "

      - name: Sync files with rsync
        run: |
          rsync -az --delete -e "ssh" \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "vendor" \
            ./ $DO_USER@$DO_HOST:${{ steps.target.outputs.path }}/

      # Opcional: subir/actualizar .env remoto por entorno (si lo manejas como secret)
      # - name: Upload .env (optional)
      #   if: steps.target.outputs.env == 'test' && secrets.ENV_TEST
      #   run: |
      #     ssh $DO_USER@$DO_HOST "cat > ${{ steps.target.outputs.path }}/.env" <<< "${{ secrets.ENV_TEST }}"

      - name: Build & up with Docker Compose on server
        run: |
          ssh $DO_USER@$DO_HOST "set -e
            cd ${{ steps.target.outputs.path }}
            docker compose pull || true
            docker compose build --pull || true
            docker compose up -d
            docker compose ps
          "
