name: Bexia ERP – Deploy

on:
  push:
    branches:
      - grupol7/develop   # -> TEST
      - grupol7/main      # -> PROD
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DO_HOST: ${{ secrets.DO_HOST }}
      DO_USER: ${{ secrets.DO_USER }}
      DO_PATH_TEST: ${{ secrets.DO_PATH_TEST }}
      DO_PATH_PROD: ${{ secrets.DO_PATH_PROD }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start ssh-agent & add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_KEY }}

      - name: Trust droplet host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$DO_HOST" >> ~/.ssh/known_hosts

      - name: Set deploy target (TEST/PROD)
        id: target
        run: |
          if [[ "${GITHUB_REF##*/}" == "grupol7/main" ]]; then
            echo "path=$DO_PATH_PROD" >> "$GITHUB_OUTPUT"
            echo "env=prod"          >> "$GITHUB_OUTPUT"
          else
            echo "path=$DO_PATH_TEST" >> "$GITHUB_OUTPUT"
            echo "env=test"           >> "$GITHUB_OUTPUT"
          fi

      - name: Preflight (create dir, perms, space)
        run: |
          ssh -o StrictHostKeyChecking=no $DO_USER@$DO_HOST "set -e
            P='${{ steps.target.outputs.path }}'
            mkdir -p \"\$P\"
            stat -c '%U:%G %A %n' \"\$P\" || true
            df -h \"\$P\" | tail -1
          "

      - name: Sync files with rsync
        run: |
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" \
            --exclude ".git" --exclude ".github" --exclude "node_modules" --exclude "vendor" \
            ./ $DO_USER@$DO_HOST:${{ steps.target.outputs.path }}/

      # Subir .env desde secrets SOLO si existen
      - name: Upload .env (TEST)
        if: ${{ steps.target.outputs.env == 'test' }}
        env:
          ENV_TEST: ${{ secrets.ENV_TEST }}
        run: |
          if [ -n "$ENV_TEST" ]; then
            echo "Uploading .env (TEST)…"
            ssh $DO_USER@$DO_HOST "cat > ${{ steps.target.outputs.path }}/.env" <<< "$ENV_TEST"
          else
            echo "ENV_TEST no está definido. Omitiendo."
          fi

      - name: Upload .env (PROD)
        if: ${{ steps.target.outputs.env == 'prod' }}
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          if [ -n "$ENV_PROD" ]; then
            echo "Uploading .env (PROD)…"
            ssh $DO_USER@$DO_HOST "cat > ${{ steps.target.outputs.path }}/.env" <<< "$ENV_PROD"
          else
            echo "ENV_PROD no está definido. Omitiendo."
          fi

      - name: Docker Compose up (build & run)
        run: |
          ssh $DO_USER@$DO_HOST "set -e
            cd ${{ steps.target.outputs.path }}
            docker compose pull || true
            docker compose build --pull || true
            docker compose up -d
            docker compose ps
          "

      - name: Run migrations and optimize
        run: |
          ssh $DO_USER@$DO_HOST "set -e
            cd ${{ steps.target.outputs.path }}
            docker compose exec -T app sh -lc '
              php artisan key:generate --force || true
              php artisan storage:link || true
              chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache || true
              chmod -R 775 /var/www/storage /var/www/bootstrap/cache || true
              php artisan migrate --force || true
              php artisan optimize:clear
            '
          "
